[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "NFDI4Objects Knowledge Graph (TA5)",
    "section": "",
    "text": "An dieser Stelle entsteht ein Handbuch für die Verwaltung und Nutzung des Knowledge Graphen von NFDI4Objects (TA5). Der Knowledge Graph besteht im Wesentlichen aus zwei Datenbanken, in denen Daten aus verschiedenene Quellen zusammengeführt werden:\n\nein Property-Graph mit aufbereiteten Daten und Abfragemöglichkeit in Cypher\nein Triple-Store mit Rohdaten in RDF und Abfragemöglichkeit in SPARQL\n\nDarüber sind eine browserbasierte Oberfläche (“Rich Metadata Discovery”) mit Möglichkeiten zur interaktiven Abfrage und Datenvisualisierung sowie die Integration in ein Learning Management System (LMS) geplant. Langfristig soll der Knowledge Graph außerdem mit anderen Knowledge Graphen im Rahmen der NFDI verknüpft werden.\nWeitere Details und Hintergründe werden im Kapitel zur technischen Architektur erklärt.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Übersicht</span>"
    ]
  },
  {
    "objectID": "datenquellen.html",
    "href": "datenquellen.html",
    "title": "Datenquellen",
    "section": "",
    "text": "Der Knowledge Graph besteht aus Metadaten von Sammlungen aus verschiedenenen Datenbanken, die mit bekannten Vokabularen angereichert werden.\nEine vorläufige Liste von Sammlungen befindet sich hier.\nDie technischen Details der Aufnahme von neuen Datenbanken und Sammlungen sowie Update-Verfahren befinden sich noch in Entwicklung.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Datenquellen</span>"
    ]
  },
  {
    "objectID": "data-model.html",
    "href": "data-model.html",
    "title": "Datenmodell",
    "section": "",
    "text": "Beispiel\nFolgender in CIDOC-CRM modellierter Teilgraph (in Turtle-Syntax):\nwird konvertiert in folgenden Property Graph (in PG Format und als Diagram):",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Datenmodell</span>"
    ]
  },
  {
    "objectID": "data-model.html#beispiel",
    "href": "data-model.html#beispiel",
    "title": "Datenmodell",
    "section": "",
    "text": "@prefix crm: &lt;http://erlangen-crm.org/170309/&gt; .\n\n&lt;http://objekte-im-netz.fau.de/palaeo/id/5af2f810b638d&gt;\n  a crm:E16_Measurement ;\n  crm:P40_observed_dimension &lt;http://objekte-im-netz.fau.de/palaeo/id/5b3540e7cea41&gt; .\n\n&lt;http://objekte-im-netz.fau.de/palaeo/id/5b3540e7cea41&gt;\n  a crm:E54_Dimension ;\n  crm:P2_has_type &lt;http://objekte-im-netz.fau.de/palaeo/id/5e3eb2d5dc30b&gt; ;\n  crm:P91_has_unit &lt;http://objekte-im-netz.fau.de/palaeo/id/5b353177d6480&gt;\n  crm:P90_has_value 2.8 .\n\n&lt;http://objekte-im-netz.fau.de/palaeo/id/5b353177d6480&gt;\n  a crm:E58_Measurement_Unit ;\n  crm:P48_has_preferred_identifier &lt;http://objekte-im-netz.fau.de/palaeo/id/5b353177d64bc&gt; .\n\n&lt;http://objekte-im-netz.fau.de/palaeo/id/5e3eb2d5dc30b&gt;\n  a crm:E55_Type .\n  crm:P48_has_preferred_identifier &lt;http://objekte-im-netz.fau.de/palaeo/id/5e3eb2d5dc310&gt; ;\n\n&lt;http://objekte-im-netz.fau.de/palaeo/id/5e3eb2d5dc310&gt;\n  a crm:E42_Identifier ;\n  crm:P3_has_note \"Höhe (Scan)\" .\n\n&lt;http://objekte-im-netz.fau.de/palaeo/id/5b353177d64bc&gt;\n  a crm:E42_Identifier ;\n  crm:P3_has_note \"cm\" .\n\n\nhttp://objekte-im-netz.fau.de/palaeo/id/5af2f810b638d\n  :E16_Measurement\n\nhttp://objekte-im-netz.fau.de/palaeo/id/5af2f810b638d \n  -&gt; http://objekte-im-netz.fau.de/palaeo/id/5b3540e7cea41\n  :P40_observed_dimension\n\nhttp://objekte-im-netz.fau.de/palaeo/id/5b3540e7cea41\n  :E54_Dimension \n  P90_has_value: 2.8\n\nhttp://objekte-im-netz.fau.de/palaeo/id/5b3540e7cea41\n  -&gt; http://objekte-im-netz.fau.de/palaeo/id/5e3eb2d5dc30b\n  :P2_has_type\n\nhttp://objekte-im-netz.fau.de/palaeo/id/5b3540e7cea41\n  -&gt; http://objekte-im-netz.fau.de/palaeo/id/5b353177d6480\n  :P91_has_unit\n\nhttp://objekte-im-netz.fau.de/palaeo/id/5b353177d6480\n  :E58_Measurement_Unit\n\nhttp://objekte-im-netz.fau.de/palaeo/id/5b353177d6480\n  -&gt; http://objekte-im-netz.fau.de/palaeo/id/5b353177d64bc\n  :P48_has_preferred_identifier \n\nhttp://objekte-im-netz.fau.de/palaeo/id/5e3eb2d5dc30b\n  :E55_Type\n\nhttp://objekte-im-netz.fau.de/palaeo/id/5e3eb2d5dc30b\n  -&gt; http://objekte-im-netz.fau.de/palaeo/id/5e3eb2d5dc310\n  :P48_has_preferred_identifier \n\nhttp://objekte-im-netz.fau.de/palaeo/id/5e3eb2d5dc310\n  :E42_Identifier\n  P3_has_note: \"Höhe (Scan)\"\n\nhttp://objekte-im-netz.fau.de/palaeo/id/5b353177d64bc\n  :E42_Identifier\n  P3_has_note: \"cm\"",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Datenmodell</span>"
    ]
  },
  {
    "objectID": "data-model.html#cidoc-crm",
    "href": "data-model.html#cidoc-crm",
    "title": "Datenmodell",
    "section": "CIDOC-CRM",
    "text": "CIDOC-CRM\n…",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Datenmodell</span>"
    ]
  },
  {
    "objectID": "data-model.html#die-nfdi4objects-core-ontologie",
    "href": "data-model.html#die-nfdi4objects-core-ontologie",
    "title": "Datenmodell",
    "section": "Die NFDI4Objects Core Ontologie",
    "text": "Die NFDI4Objects Core Ontologie\n…",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Datenmodell</span>"
    ]
  },
  {
    "objectID": "data-model.html#weitere-unterstütze-ontologien",
    "href": "data-model.html#weitere-unterstütze-ontologien",
    "title": "Datenmodell",
    "section": "Weitere unterstütze Ontologien",
    "text": "Weitere unterstütze Ontologien\n…",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Datenmodell</span>"
    ]
  },
  {
    "objectID": "data-model.html#terminologien",
    "href": "data-model.html#terminologien",
    "title": "Datenmodell",
    "section": "Terminologien",
    "text": "Terminologien\n…",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Datenmodell</span>"
    ]
  },
  {
    "objectID": "architecture.html",
    "href": "architecture.html",
    "title": "Technische Architektur",
    "section": "",
    "text": "Übersicht\nDer gesamte Prozess zur Integration von Daten in den Knowledge Graphen beinhaltet besteht aus folgenden Schritten:\nEtwas genauer lässt sich der Prozess etwa wie in Figure 4.1 dargestellt veranschaulichen.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Technische Architektur</span>"
    ]
  },
  {
    "objectID": "architecture.html#übersicht",
    "href": "architecture.html#übersicht",
    "title": "Technische Architektur",
    "section": "",
    "text": "Annahme, Prüfung und Bereinigung\nSiehe https://github.com/nfdi4objects/n4o-import\nKonvertierung\nEinspielung\nImplementierung siehe https://github.com/nfdi4objects/n4o-property-graph\nAnreicherung\nBereitstellung\nNoch nicht umgesett\n\n\n\n\n\n\n\n\nFigure 4.1",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Technische Architektur</span>"
    ]
  },
  {
    "objectID": "architecture.html#konvertierung",
    "href": "architecture.html#konvertierung",
    "title": "Technische Architektur",
    "section": "Konvertierung",
    "text": "Konvertierung\nLIDO-XML-Daten werden mit Hilfe von X3ML ins Property Graph Format konvertiert.\nZur Konvertierung von RDF-Daten ins Property Graph Format dient das Skript rdf2cypher.py (wird derzeit überarbeitet), das eine Cypher-Datei (in Zukunkft CYPHERL und/oder PG-JSONL) ausgibt.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Technische Architektur</span>"
    ]
  },
  {
    "objectID": "architecture.html#einspielung",
    "href": "architecture.html#einspielung",
    "title": "Technische Architektur",
    "section": "Einspielung",
    "text": "Einspielung\n\nRDF-Daten in den Property-Graph\nZum Einspielen der Cypher-Datei in eine Neo4J-Datenbank kann das Kommando cypher-shell verwendet werden, das im Neo4J-Docker-Container enthalten ist oder separat installiert werden kann.\nDa Neo4J aus dem Docker-Container nicht auf die Cypher-Datei zugreifen kann, muss ihr Inhalt per Pipe eingelesen werden:\n&lt;file.cypher | docker exec -t neo4j \\\n  cypher-shell -a &lt;ADDRESS&gt; -u &lt;USERNAME&gt; -p &lt;PASSWORD&gt;\nEin neuer Docker Container kann mit diesem Kommando erstellt werden. Ein Ordner für Volume muss bereits existieren.\ndocker run -d \\\n    --name=neo4j \\\n    --publish=7474:7474 --publish=7687:7687 \\\n    --env NEO4J_AUTH=none \\\n    --user $(id -u):$(id -g) \\\n    --volume=$cwd/data:/data \\\n    neo4j \n\n\nRDF-Daten\nSiehe https://github.com/nfdi4objects/n4o-import",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Technische Architektur</span>"
    ]
  },
  {
    "objectID": "architecture.html#anreicherung",
    "href": "architecture.html#anreicherung",
    "title": "Technische Architektur",
    "section": "Anreicherung",
    "text": "Anreicherung\n\nExpansion der Klassenhierarchie\nDa Property-Graphen im Gegensatz zu RDF keine Inferenz-Regeln beinhalten und weil Inferenz-Regeln sowieso umständlich sind, werden die Daten im Property-Graphen expandiert. Grundlage ist ein eigener Property-Graph mit der Klassenhierarchie des CIDOC-CRM Datenmodell samt zwischenzeitlich umbenannter oder veralteter Klassen in der Datei crm-classes.pg (siehe SVG-Diagram). Der Graph aller Klassen enthält Informationen darüber welche Klassen sich aus einer anderen ergeben, z.B.\n\nE22_Man_Made_Object =&gt; E22_Human_Made_Object (renamedTo)\nE50_Date =&gt; E41_Appellation (replacedBy)\nE7_Activity=&gt; E5_Event (superClass)\n\nAus diesen Daten wird die Expansionstabelle crm-expand.txt erzeugt, z.B.:\n\nE22_Human_Made_Object =&gt; E22, E71, E70, E24 E77 und E1\n\nZum Ausführen der Expansion:\n./pg-expand-labels.py [Neo4j login file] &lt; crm-expand.txt\nOhne Konfigurationsdatei für Neo4J werden Cypher-Kommandos ausgegeben. Mit Konfiguration wird die Expansion in der betreffenden Neo4J-Datenbank ausgeführt.\nNach der Expansion ist die Abfrage nach allen Knoten mit einem bestimmten Label wie z.B. E22_Human_Made_Object möglich oder nach allen Knoten, die direkt oder indirekt er Klasse E22 angehören.\nDie Expansion von zusätzlichen Klassen der NFDI4Objects Core Ontology auf CIDOC-CRM ist auf die gleiche Weise möglich aber noch nicht umgesetzt.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Technische Architektur</span>"
    ]
  },
  {
    "objectID": "property-graph.html",
    "href": "property-graph.html",
    "title": "Property Graph",
    "section": "",
    "text": "Property-Graphen bilden ein flexibles und nicht zu kompliziertes Werkzeug zur Strukturierung, Speicherung und Auswertung vernetzter Daten. Dabei werden Daten nicht wie beispielsweise bei SQL in Form von Tabellen, sondern in Form von Graphen aus Knoten gespeichert, die durch Kanten miteinander verbunden sind. Sowohl Knoten als auch Kanten können mit Eigenschaften versehen werden und haben jeweils Labels als Angabe ihrer Art.\nEine weitergehende, allgemeine Erklärung zu Property-Graphen bietet der Artikel Property-Graphen: eine kurze Einführung.\nIm Gegensatz zu RDF sind Property Graphen nicht als allgemeines Format zum Austausch und zur Integration von Daten gedacht. Der Property Graph von NFDI4Objects benötigt daher eine Datenmodell das festlegt, welche Arten von Knoten und Kanten wie miteinander verknüpft und mit Eigenschaften versehen werden können.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Property Graph</span>"
    ]
  },
  {
    "objectID": "cypher.html",
    "href": "cypher.html",
    "title": "Cypher-Einführung",
    "section": "",
    "text": "Ein Property-Graph kann mit Cypher-Anfragen nähere Informationen über seinen Inhalt liefern und verändert werden. Dafür muss er in Neo4j oder einer anderen Graphdatenbank, die mit Cypher-Anfragen umgehen kann, übertragen werden. Cypher ist eine SQL-aquivalente Sprache für Graphdatenbanken.\n\nEinen Graph mit Cypher erstellen\nMit CREATE lassen sich neue Kanten (Nodes), Kanten (Relationships) und Eigenschaften (Properties) erstellen. Eine Reihe von CREATE Cypher-Anfragen ist eine Möglichkeit einen Property-Graph in Neo4j zu übertragen. MERGE ist ähnlich, aber erstellt keine Duplikate.\nCREATE (a:Person {name:'Anna', geboren:1980})-[:KENNT {seit:2019}]-&gt;(b:Person {name:'Luke', geboren:1988, nationalität: 'Kanadier'}) \nMERGE (a:Person {name:'Anna', geboren:1980})-[:KENNT {seit:2019}]-&gt;(b:Person {name:'Luke', geboren:1988, nationalität: 'Kanadier'}) \n\n\nNodes\nKnoten heißen Nodes und werden in runden Klammern definiert.\nMATCH (n:Person {name:'Anna'})\nRETURN n.geboren AS geburtsjahr\nPerson ist ein Label. Labels sind wie Tags und werden genutzt um die Datenbank zu befragen. Eine Node Kann mehrere Labels haben.\nName ist eine Property von Anna. Properties werden in geschweiften Klammern definiert and geben nähere Informationen. Nach Properties kann auch gefragt werden.\nN ist eine Variabel. Auf Variabeln kann weiter verwiesen werden.\nIn diesem Beispiel findet MATCH alle Person Nodes in dem Graph wo die Property name Anna ist und setzt die Variabel n zu dem Ergebnis. n wird dann an RETURN weitergegeben, welche den Wert von einer anderen Property (geboren) dieser Nodes wiedergibt.\n\n\nRelationships\nNodes können mit Relationships verbunden werden. Eine Relationship braucht eine Start Node, eine Ende Node und genau einen Typ. Relationships haben in Cypher einen Pfeil um die Richting zu zeigen. Die Informationen über eine Relationship sind in eckigen Klammern eingeschlossen.\nWährend Nodes mehrere Labels haben können, können Relationships nur einen Typ haben.\nMATCH (:Person {name: 'Anna'})-[r:KENNT WHERE r.seit &lt; 2020]-&gt;(freund:Person)\nRETURN count(r) As zahlAnFreunden\nIn dieser Anfrage findet Match Relationships des Typs KENNT wo die Property seit kleiner als 2020 ist. Außerdem müssen Relationships von einer Person Node mit der Property Anna zu einer anderen Personen Node gehen (wir nennen diese freund). count() wird genutzt um zu zählen wie viele Relationships an die Variabel r in MATCH gebunden wurden somit erhalten wir mit RETURN eine Zahl.\n\n\nPfade\nMATCH (n:Person {name: 'Anna'})-[:KENNT]-{1,5}(freund:Person WHERE n.geboren &lt; freund.geboren)\nRETURN DISTINCT freund.name AS ältereFreunde\nDieses Beispiel nutzt eine quantifizierte Relationship um alle Pfade, die bis zu 5 Schritte entfernt sind, zu finden. Dabei werden nur Relationships des Typs KENNT verwendet. Die Start Node ist Anna und Ende Node sind Personen älter als Anna. Durch DISTINCT wird das gleiche Ergebnis nur einmal ausgegeben.\nMATCH p=shortestPath((:Person {name: 'Anna'})-[:KENNT*1..10]-(:Person {nationalität: 'Kanadier'}))\nRETURN p\nAuch Pfade können einer Variable zugewiesen werden. Hier wird der vollständige Pfad ausgegeben.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Cypher-Einführung</span>"
    ]
  },
  {
    "objectID": "queries.html",
    "href": "queries.html",
    "title": "Beispiel Cypher-Abfragen",
    "section": "",
    "text": "Zeige wie viele Node-Labels jeweils existieren, die einen Buchstaben gefolgt auf eine Zahl am Anfang haben.\nDa eine Node mehrere Labels haben kann, nutzen wir “any(label”.\n~ ‘^[a-zA-Z][0-9].*’ Die Tilde bedeuted, dass das folgende RegEx ist.\nMit return geben wir den ersten Buchstaben des ersten Labels aus und wieviele erste Labels mit diesem ersten Buchstaben.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Beispiel Cypher-Abfragen</span>"
    ]
  },
  {
    "objectID": "queries.html#weitere-informationen",
    "href": "queries.html#weitere-informationen",
    "title": "Beispiel Cypher-Abfragen",
    "section": "Weitere Informationen",
    "text": "Weitere Informationen\nDas englische Cypher Handbuch",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Beispiel Cypher-Abfragen</span>"
    ]
  },
  {
    "objectID": "cypher_mit_python.html",
    "href": "cypher_mit_python.html",
    "title": "Cypher mit Python",
    "section": "",
    "text": "Weitere Informationen\nDas englische Neo4j Python Handbuch",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Cypher mit Python</span>"
    ]
  },
  {
    "objectID": "triple-store.html",
    "href": "triple-store.html",
    "title": "Triple Store",
    "section": "",
    "text": "Grundlagen\nEin Triple Store ist eine Graphendatenbank, die auf Basis von RDF Daten in Subjekt-Prädikat-Objekt Triples speichert. Das Subjekt und Objekt stellen die Knoten dar, die über ein Prädikat verbunden sind.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Triple Store</span>"
    ]
  },
  {
    "objectID": "triple-store.html#inhalt-des-triple-store",
    "href": "triple-store.html#inhalt-des-triple-store",
    "title": "Triple Store",
    "section": "Inhalt des Triple Store",
    "text": "Inhalt des Triple Store\n\nAlle in RDF angelieferten Daten (soweit syntaxktisch korrekt). Es ist also kein einheitliches Datenmodell vorgeschrieben! Aus den RDF-Daten werden lediglich Aussagen über Terminologien und Ontologien herausgefiltert\nJede Lieferung ist ein Named Graph, so dass die Lieferungen sowohl einzeln, als auch in einem RDF-Graphen zusammengefasst abgefragt werden können.\nUnterstützte Ontologien und Terminologien sind ebenfalls als eigene Namend Graphs eingespielt, so dass sie für Abfragen verwendet werden können.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Triple Store</span>"
    ]
  },
  {
    "objectID": "triple-store.html#beispielabfragen",
    "href": "triple-store.html#beispielabfragen",
    "title": "Triple Store",
    "section": "Beispielabfragen",
    "text": "Beispielabfragen\n\nStatistik aller Prädikate und ihrer Häufigkeit\nSELECT distinct ?pred WHERE {\n  ?sub ?pred ?obj .\n}\n\n\nStatistik aller Prädikate sortiert nach Anzahl der Prädikate\nSELECT distinct ?pre (COUNT(?pre) AS ?count) WHERE {\n  ?s ?pre ?obj\n} \nGROUP BY ?pre\nORDER BY DESC(?count)\n\n\nStatistik aller Objekte mit spezifischen Prädikat sortiert nach Anzahl der Subjekte\nSELECT distinct (COUNT(?s) AS ?count) ?obj WHERE {\n  ?s &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; ?obj\n} \nGROUP BY ?obj\nORDER BY DESC(?count)",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Triple Store</span>"
    ]
  }
]