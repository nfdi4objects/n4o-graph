# Systemarchitektur {#sec-architecture}

Der N4O Graph besteht im Kern aus einem Triple-Store, an den verschiedene Dienste zur Verwaltung und Nutzung angebunden sind. Die Dienste werden in einzelnen git-Repositorien verwaltet und als Docker-Images publiziert:

- [n4o-fuseki](https://github.com/nfdi4objects/n4o-fuseki): vorkonfigurierter Triple-Store
- [n4o-graph-apis](https://github.com/nfdi4objects/n4o-graph-apis): APIs und Weboberfl채che zum lesenden Zugriff
- [n4o-graph-importer](https://github.com/nfdi4objects/n4o-graph-importer): Workflows und APIs zum schreibenden Zugriff
- [lido-rdf-converter](https://github.com/nfdi4objects/lido-rdf-converter): Skripte und Webanwendung zur Konvertierung von LIDO nach RDF

Dar체ber hinaus gibt es das Repository [n4o-graph](https://github.com/nfdi4objects/n4o-graph) zur Dokumentation und Konfiguration der Dienste als Gesamtheit, darunter auch dieses Handbuch.

```{mermaid}
graph TD
    terminologies(terminologies) --> receive
    mappings(mappings) --> receive
    collections(collections) --> receive
    data(research data) --> receive
    stage(stage)

    subgraph importer ["n4o-graph-**importer**"]
        receive[**receive**]
        receive -- validate, transform, report --> stage
        stage --> load
        load[**load**]
    end
    subgraph fuseki ["n4o-**fuseki**"]
        kg(triple store)
    end
    subgraph n4ograph ["n4o-graph-**apis**"]
        ui[**web application**]
    end
    subgraph lido ["lido-rdf-**converter**"]
        lido2rdf[**lido2rdf**]
        web-app[**web-app**]
    end

    stage --> ui
    kg -- SPARQL --> ui
    ui -- SPARQL --> apps(applications)

    receive <--> lido2rdf
    load -- SPARQL update & graph store --> kg

    web-app <--> ui

    ui <--web browser--> users(users)
    
classDef data stroke:#4d8dd1, fill:#D4E6F9, color:#333;
classDef prime fill: #ECECFF, color:#333, stroke:#9370DB;
classDef box fill:#ffffde, stroke:#aaaa33, color:#333;
class terminologies,mappings,collections,data,stage,kg,apps,users data;
class receive,load,ui,lido2rdf,web-app prime;
class importer,fuseki,n4ograph,lido box;
linkStyle default color:black;
```


## Workflow

Der gesamte Prozess zur Integration von Daten in den Knowledge Graphen beinhaltet besteht aus mehreren Schritten.
Zur Datenannahme, Pr체fung und Bereinigung siehe  <https://github.com/nfdi4objects/n4o-graph-importer>.
Dort findet sich unter anderem das offizielle [XML-Schema f체r LIDO-Daten](https://github.com/nfdi4objects/lido-schema).

LIDO-XML-Daten werden mit Hilfe von [X3ML](https://github.com/isl/x3ml) ins RDF-Format konvertiert. 

