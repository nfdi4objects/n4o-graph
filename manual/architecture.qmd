---
title: Technische Architektur
---

## Übersicht

Der gesamte Prozess zur Integration von Daten in den Knowledge Graphen beinhaltet besteht aus folgenden Schritten:

1. **Annahme**, **Prüfung** und **Bereinigung**

   Siehe <https://github.com/nfdi4objects/n4o-import>

2. **[Konvertierung](#konvertierung)**

3. **[Einspielung](#einspielung)**

   Implementierung siehe <https://github.com/nfdi4objects/n4o-property-graph>

4. **[Anreicherung](#anreicherung)**

5. **Bereitstellung**

   Noch nicht umgesett

Etwas genauer lässt sich der Prozess etwa wie in @fig-data-flow dargestellt veranschaulichen.

![](img/data-flow.svg){#fig-data-flow}

## Konvertierung

LIDO-XML-Daten werden mit Hilfe von [X3ML](https://github.com/isl/x3ml)
ins Property Graph Format konvertiert. 

Zur Konvertierung von RDF-Daten ins Property Graph Format dient das Skript
`rdf2cypher.py` (wird derzeit überarbeitet).

## Einspielung

Mit ```cypher-shell``` lassen sich Daten in Neo4j einspielen. Dafür wird eine Neo4j Distribution benötigt oder eine [seperate Instaltion](https://neo4j.com/deployment-center/?cypher-shell).  
```<Cypher>``` ist eine Datein mit mehreren Cypher Anfragen, die jeweils auf ```;``` enden.  
Der Standard Wert für ```-a``` ist ```neo4j://localhost:7687```. Für ```-u``` und ```-p``` ist der Standard Wert ```""```

```bash
cypher-shell -f <Cypher> -a <ADDRESSE> -u <USERNAME> -p <PASSWORT>
```

```cypher-shell``` ist auch in der Docker Distribution von Neo4j möglich. Um Cypher in einem Docker Container zu verwenden müssen die Daten in Docker kopiert werden.  

```bash
docker cp <Cypher> neo4j:<Cypher>
docker exec -it neo4j /bin/bash
cypher-shell -f /<Cypher> -a <ADDRESS> -u <USERNAME> -p <PASSWORD>
```

Ein neuer Docker Container kann mit diesem Kommando erstellt werden. Ein Ordner für Volume muss bereits existieren.
```bash
docker run -d \
    --name=neo4j \
    --publish=7474:7474 --publish=7687:7687 \
    --env NEO4J_AUTH=none \
    --user $(id -u):$(id -g) \
    --volume=$cwd/data:/data \
    neo4j 
```

## Anreicherung

### Expansion der Klassenhierarchie

Da Property-Graphen im Gegensatz zu RDF keine Inferenz-Regeln beinhalten und
weil Inferenz-Regeln sowieso umständlich sind, werden die Daten im
Property-Graphen *expandiert*.  Grundlage ist ein eigener Property-Graph mit
der Klassenhierarchie des CIDOC-CRM Datenmodell samt zwischenzeitlich
umbenannter oder veralteter Klassen in der Datei `crm-classes.pg` (siehe
[SVG-Diagram](img/crm-classes.svg)). Der Graph aller Klassen enthält Informationen
darüber welche Klassen sich aus einer anderen ergeben, z.B.

- `E22_Man_Made_Object` => `E22_Human_Made_Object` (renamedTo)
- `E50_Date` => `E41_Appellation` (replacedBy)
- `E7_Activity`=> `E5_Event` (superClass)

Aus diesen Daten wird die Expansionstabelle [`crm-expand.txt`](crm-expand.txt)
erzeugt, z.B.:

- `E22_Human_Made_Object` => `E22`, `E71`, `E70`, `E24` `E77` und `E1`

Zum Ausführen der Expansion: 

~~~sh
./pg-expand-labels.py [Neo4j login file] < crm-expand.txt
~~~

Ohne Konfigurationsdatei für Neo4J werden Cypher-Kommandos ausgegeben. Mit
Konfiguration wird die Expansion in der betreffenden Neo4J-Datenbank
ausgeführt.

Nach der Expansion ist die Abfrage nach allen Knoten mit einem bestimmten Label
wie z.B. `E22_Human_Made_Object` möglich oder nach allen Knoten, die direkt
oder indirekt er Klasse `E22` angehören.

*Die Expansion von zusätzlichen Klassen der [NFDI4Objects Core
Ontology](https://github.com/nfdi4objects/n4o-core-ontology) auf CIDOC-CRM ist
auf die gleiche Weise möglich aber noch nicht umgesetzt.*


