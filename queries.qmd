---
title: Beispiel Cypher-Abfragen
execute:
  echo: false
lang: de
toc: true
---

Mit MATCH werden Daten aus dem Graph abgefragt.
RETURN gibt Ergebnisse aus. So würde "MATCH (n) RETURN n" die vollständige Datenbank ausgeben.

#### Zeige wie viele Node-Labels jeweils existieren, die einen Buchstaben gefolgt auf eine Zahl am Anfang haben.
Da eine Node mehrere Labels haben kann, nutzen wir "any(label".  
\~ '\^[a-zA-Z][0-9].\*' Die Tilde bedeuted, dass das folgende RegEx ist.  
Mit return geben wir den ersten Buchstaben des ersten Labels aus und wieviele erste Labels mit diesem ersten Buchstaben.

```{cypher}
MATCH (n)  
WHERE any(label IN labels(n) WHERE label =~ '\^[a-zA-Z][0-9].\*')  
RETURN substring(head(labels(n)), 0, 1) AS entityTypes, count(\*) AS entityCount;
```

```{python}
from neo4j import GraphDatabase
import json
with open('neo4j.json', 'r') as file:
  neo4j_login = json.loads(file.read())
  uri = neo4j_login.get("uri")
  user = neo4j_login.get("user")
  password = neo4j_login.get("password")
uri = "neo4j://localhost"
user = ""
password = ""
cmd = "MATCH (n) WHERE any(label IN labels(n) WHERE label =~ '^[a-zA-Z][0-9].*') RETURN substring(head(labels(n)), 0, 1) AS entityTypes, count(*) AS entityCount;"
driver = GraphDatabase.driver(uri, auth=(user, password))
with driver.session() as session:
 for x in session.run(cmd):
  print(','.join((str(x) for x in x.values())))
driver.close()
```

#### Welche CIDOC-CRM Node-Labels existieren? Ist gleich der Nodes mit Label E.
LIMIT ist hier um nicht die ganze Seite zu füllen. So werden nur die ersten 10 Treffer ausgegeben.

```{cypher}
MATCH (n)  
WHERE any(label IN labels(n) WHERE label =~ '^E\\d+.\*')  
RETURN labels(n) AS entityTypes LIMIT 10;
```

```{python}
cmd = "MATCH (n) WHERE any(label IN labels(n) WHERE label =~ '^E\\d+.*') RETURN labels(n) AS entityTypes LIMIT 10;"
driver = GraphDatabase.driver(uri, auth=(user, password))
with driver.session() as session:
 for x in session.run(cmd):
  print(','.join((str(x) for x in x.values())))
driver.close()
```

#### Zeige alle anderen Node-Lables und wie viele von ihnen existieren.

```{cypher}
MATCH (n)  
WHERE any(label IN labels(n) WHERE label =~ '^.[^0-9].\*')  
RETURN labels(n) AS entityTypes, count(\*) AS entityCount LIMIT 10
```

```{python}
cmd = "MATCH (n) WHERE any(label IN labels(n) WHERE label =~ '^.[^0-9].*') RETURN labels(n) AS entityTypes, count(*) AS entityCount LIMIT 10;"
driver = GraphDatabase.driver(uri, auth=(user, password))
with driver.session() as session:
 for x in session.run(cmd):
  print(','.join((str(x) for x in x.values())))
driver.close()
```


#### Zeige alle Relationships und wie viele von ihnen existieren.
Relationships in Cypher werden sehr direkt mit einem ASCII-Pfeil beschrieben. So haben wir hier zwei Nodes in runden Klammern, die uns für diese Anfrage nicht interessieren. Diese Nodes sind mit einem Pfeil und einer Relationship in eckigen Klammern verknüpft.

```{cypher}
MATCH ()-[r]->()  
RETURN DISTINCT type(r) AS relationshipType, count(*) AS relationshipCount LIMIT 10
```

```{python}
cmd = "MATCH ()-[r]->() RETURN DISTINCT type(r) AS relationshipType, count(*) AS relationshipCount LIMIT 10;"
driver = GraphDatabase.driver(uri, auth=(user, password))
with driver.session() as session:
 for x in session.run(cmd):
  print(','.join((str(x) for x in x.values())))
driver.close()
```

## Weitere Informationen

[Das englische Cypher Handbuch](https://neo4j.com/docs/cypher-manual/current/introduction/)  
Für Informationen über Property-Graphen: Voß, Jakob. 2024. “Property-Graphen: eine kurze Einführung.” VZG Aktuell. [https://doi.org/10.5281/zenodo.10971391](https://doi.org/10.5281/zenodo.10971391). 
